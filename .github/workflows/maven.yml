# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven


#  De CI pipeline zal het project bouwen, unit- en integratie testen uitvoeren,
# de sonar analyse uitvoeren, de Docker image bouwen
# deze stappen succesvol zijn de versie in de GitHub repo taggen.

#sonar token: 66d58841310565a0ce131f42d78a931090915738
# mvn sonar:sonar \ -Dsonar.projectKey=BankAccountServiceCICD \ -Dsonar.host.url=http://sonar.cloud-native-minor.it -Dsonar.login=66d58841310565a0ce131f42d78a931090915738
name: BankAccountServiceCICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B install --file pom.xml

      - name: Code Analysis
        run: |
          mvn -B sonar:sonar -Dsonar.projectKey=BankAccountServiceCICD \
                -Dsonar.host.url=http://sonar.cloud-native-minor.it \
                -Dsonar.host.url=http://sonar.cloud-native-minor.it \
                -Dsonar.login=66d58841310565a0ce131f42d78a931090915738 \
                -Dsonar.qualitygate.wait=true \
                -Dsonar.qualitygate.timeout=60

#      - name: Build the Docker image
#        run: docker build . --file Dockerfile --tag account-service:v$GITHUB_RUN_NUMBER

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bankaccountservicecicd
          IMAGE_TAG:  ${{github.run_number}}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Tag the build version
        run: |
          git tag "Build-v$GITHUB_RUN_NUMBER"
          git push origin "Build-v$GITHUB_RUN_NUMBER"

      - name: Deploy in EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          HOSTNAME: ${{ secrets.HOSTNAME  }}
          USER_NAME: ${{ secrets.USER_NAME  }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bankaccountservicecicd
          IMAGE_TAG: ${{ github.event.inputs.version }}
        run: |
            echo "Image to deploy: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
            echo "${PRIVATE_KEY}" > private_key && chmod 600 private_key
            ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} "
              echo \"Image to deploy: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}\"
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_REGISTRY}/${ECR_REPOSITORY}
              docker rm -f account-service
              docker run -d -p 8080:8080 -e SPRING_PROFILES_ACTIVE=prod --name account-service ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}